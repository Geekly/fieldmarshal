/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.geeklythings.fieldmarshal.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.table.AbstractTableModel;
import net.geeklythings.fieldmarshal.entity.Player;
import net.geeklythings.fieldmarshal.entity.Tournament;
import net.geeklythings.fieldmarshal.managers.TournamentManager;
import net.geeklythings.fieldmarshal.model.Faction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author khooks
 */
public class PlayersView extends javax.swing.JPanel implements Observer {

    static private final Logger logger = LogManager.getLogger("PlayersView");
    private TournamentManager manager;
    private ArrayList<Player> players;
    private Tournament localTournament;  //local scope to the activeTournament
    
    /**
     * Creates new form PlayersView
     */
    public PlayersView() {
        initComponents();
        // be notified when the upper level tournament changes
        
    }

    public void setManager(TournamentManager manager)
    {
        this.manager = manager;
        this.manager.addObserver(this);
        localTournament = this.manager.getTournament();
        if( localTournament != null)
        {
            PlayerTableModel model = (PlayerTableModel)tablePlayers.getModel();
            //((PlayerTableModel)tablePlayers.getModel()).setPlayers( localTournament.getPlayers() );
        }
    }
    
    public TournamentManager getManager(){ return this.manager; }
    
    public void setTournament(Tournament t)
    {
        this.localTournament = t;
        updateView();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePlayers = new javax.swing.JTable();
        addPlayerButton = new javax.swing.JButton();

        tablePlayers.setName(""); // NOI18N
        tablePlayers.getTableHeader().setReorderingAllowed(false);
        tablePlayers.setModel( new PlayerTableModel() );
        jScrollPane1.setViewportView(tablePlayers);

        addPlayerButton.setText("Add New Player");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPlayerButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(addPlayerButton)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        // TODO add your handling code here:
        // insert blank entry into table
        PlayerTableModel model = (PlayerTableModel)tablePlayers.getModel();
        if( model != null)
        {
            logger.debug("Adding player");
            players.add(new Player("Bibimus", "Cooper", Faction.LEGION));
        }
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePlayers;
    // End of variables declaration//GEN-END:variables


    @Override
    public void update(Observable manager, Object o) {
        if( (manager instanceof TournamentManager) && (o instanceof Tournament) )
        {
            localTournament = ((TournamentManager)manager).getTournament();
            updateView();
        }
    }

    public void updateView() {
        ((PlayerTableModel)tablePlayers.getModel()).fireTableDataChanged();
        //update the modelView of the table
        
    }
    
    
    private class PlayerTableModel extends AbstractTableModel 
    {

        public PlayerTableModel()
        {
            super();
        }

        @Override 
        public String getColumnName(int index)
        {
            String value = "";
            switch(index)
            {
                case 0: value = "First Name";
                        break;
                case 1: value = "Last Name";
                        break;
                case 2: value = "Faction";
                        break;
                default: value = "";
                        break;
            }
            return value;
        }

        @Override
        public int getRowCount() {
            if( players != null)
            {
                return players.size();
            }
            return 0;
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int i, int j) {

            Player player = players.get(i);
            String value = "";
            switch(j)
            {
                case 0: value = player.getFirstName();
                        break;
                case 1: value = player.getLastName();
                        break;
                case 2: value = player.getFaction().getName();
                        break;
                default: value = "";
                        break;
            }
            return value;
        }

    }

    
}
